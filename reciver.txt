module uartrx
(
  input clk,
  input rst,
  input rx,
  output reg done,
  output reg [7:0] rxdata,
  output reg [7:0] data,   // New output register to hold the final received data
  output reg [31:0] all_data1 , // New register to hold the full 32-bit data
  output reg [31:0] all_data2  // New register to hold the full 32-bit data

);

  // State parameters
  parameter IDLE  = 2'b00;
  parameter START = 2'b01;

  integer counts = 0;
  reg [1:0] state = IDLE;  // Initialize state using parameter
  wire bclk;

  // Counter to track where to store in all_data (each byte will be stored 8 bits at a time)
  integer byte_count1 = 0;


  // Instantiate the baud rate generator
  br #(.BAUD(9600)) u_br (
    .clk(clk),    // Connect the system clock (100 MHz)
    .rst(rst),    // Connect the reset signal
    .bclk(bclk)   // Connect the output baud clock
  );

  // State Machine for UART Reception
  always @(posedge bclk) begin
    if (rst) begin
      rxdata <= 8'h00;
      data <= 8'h00;       // Reset data register
      all_data1 <= 32'h00000000;  // Reset all_data register
		      all_data2 <= 32'h00000000;  // Reset all_data register

      counts <= 0;
      byte_count1 <= 0;     // Reset byte counter
      done <= 1'b0;
      state <= IDLE;       // Reset to IDLE state
    end
    else begin
      case (state)
        IDLE: begin
          rxdata <= 8'h00;
          counts <= 0;
          done <= 1'b0;

          if (rx == 1'b0)
            state <= START;
          else
            state <= IDLE;
        end

        START: begin
          if (counts <= 7) begin
            counts <= counts + 1;
            rxdata <= {rx, rxdata[7:1]};  // Shift the received bits
          end
          else begin
            counts <= 0;
            done <= 1'b1;
            data <= rxdata;   // Transfer completed rxdata to data register

            // Store rxdata into all_data 8 bits at a time
            case (byte_count1)
              0: all_data1[7:0] <= rxdata;         // Store first byte in lower 8 bits
              1: all_data1[15:8] <= rxdata;        // Store second byte
              2: all_data1[23:16] <= rxdata;       // Store third byte
              3: all_data1[31:24] <= rxdata;      // Store fourth byte
				  
				  
				  4: all_data2[7:0] <= rxdata;         // Store first byte in lower 8 bits
              5: all_data2[15:8] <= rxdata;        // Store second byte
              6: all_data2[23:16] <= rxdata;       // Store third byte
              7: all_data2[31:24] <= rxdata;      // Store fourth byte
            endcase

            // Increment byte counter
            byte_count1 <= byte_count1 + 1;

            // Reset or finish once 4 bytes are received
            if (byte_count1 == 8) begin
              byte_count1 <= 0;  // Reset counter after all 4 bytes are stored
            end
				
				
				
				
				
				
				

            state <= IDLE;
          end
        end

        default: state <= IDLE;
      endcase
    end
  end

endmodule
